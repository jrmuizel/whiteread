var searchIndex = {};
searchIndex["whiteread"] = {"doc":"Crate for reading whitespace-separated values.","items":[[3,"SplitAsciiWhitespace","whiteread","Fast version of std::str::SplitWhitespace, but with some drawbacks.",null,null],[3,"Lengthed","","Wrapper for reading vector of values represented by a list prepended by a number of elements.",null,null],[12,"0","","",0,null],[3,"WhiteReader","","Wrapper for BufRead allowing easy parsing values from a Reader.",null,null],[4,"WhiteError","","Error which can occur while parsing `White` object.",null,null],[13,"TooShort","","There was not enough input to parse a value.",1,null],[13,"Leftovers","","Excessive input was provided.",1,null],[13,"ParseError","","Parse error occured (data was in invalid format).",1,null],[13,"IoError","","IO Error occured.",1,null],[5,"parse_line","","Helper function for parsing `White` value from one line of stdin.",null,{"inputs":[],"output":{"name":"whiteresult"}}],[5,"parse_string","","Helper function for parsing `White` value from string. Leftovers are considered an error.",null,{"inputs":[{"name":"str"}],"output":{"name":"whiteresult"}}],[5,"open","","Opens a file, and wraps in WhiteReader",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[6,"WhiteResult","","",null,null],[8,"StrStream","","A streaming iterator yielding borrowed strings.",null,null],[10,"next","","",2,null],[8,"StrExt","","",null,null],[10,"split_ascii_whitespace","","",3,null],[8,"White","","Trait for values that can be parsed from stream of whitespace-separated words.",null,null],[10,"read","","",4,{"inputs":[{"name":"i"}],"output":{"name":"whiteresult"}}],[8,"WhiteResultExt","","Trait providing additional methods on `WhiteResult`.",null,null],[10,"ok_or_none","","Propagates an error, unless it&#39;s TooShort (returns None in that case).",5,null],[11,"next","rustc_unicode::u_str","",6,null],[11,"next","whiteread","",7,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"whiteerror"}}],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"ok_or_none","","",8,null],[11,"read","collections::string","",9,{"inputs":[{"name":"i"}],"output":{"name":"whiteresult"}}],[11,"read","collections::vec","",10,{"inputs":[{"name":"i"}],"output":{"name":"whiteresult"}}],[11,"eq","whiteread","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"read","","",0,{"inputs":[{"name":"i"}],"output":{"name":"whiteresult"}}],[11,"new","","Wraps a BufRead.",11,{"inputs":[{"name":"b"}],"output":{"name":"whitereader"}}],[11,"parse","","Parses a White value without specialy treating newlines (just like `scanf` or `cin&gt;&gt;`)",11,null],[11,"p","","Just parse().unwrap().",11,null],[11,"line","","Reads a new line from input and parses it into White value **as a whole**.",11,null],[11,"start_line","","Reads a new line from input and parses some part of it into White value.",11,null],[11,"continue_line","","Parses some part of current line into White value.",11,null],[11,"finish_line","","Parses remaining part of current line into White value.",11,null],[11,"next_line","","Reads a new line and returns it.",11,null],[11,"unwrap","","Gets underlying buffer back.",11,null],[11,"next","","",11,null]],"paths":[[3,"Lengthed"],[4,"WhiteError"],[8,"StrStream"],[8,"StrExt"],[8,"White"],[8,"WhiteResultExt"],[3,"SplitWhitespace"],[3,"SplitAsciiWhitespace"],[6,"WhiteResult"],[3,"String"],[3,"Vec"],[3,"WhiteReader"]]};
initSearch(searchIndex);
